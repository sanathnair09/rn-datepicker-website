(self.webpackChunkreact_native_datepicker_website=self.webpackChunkreact_native_datepicker_website||[]).push([[214],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return d},kt:function(){return u}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),c=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=c(e.components);return a.createElement(p.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),m=c(n),u=r,k=m["".concat(p,".").concat(u)]||m[u]||s[u]||i;return n?a.createElement(k,o(o({ref:t},d),{},{components:n})):a.createElement(k,o({ref:t},d))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var c=2;c<i;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3972:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return l},metadata:function(){return p},toc:function(){return c},default:function(){return s}});var a=n(2122),r=n(9756),i=(n(7294),n(3905)),o=["components"],l={sidebar_position:2,title:"Manual Installation",sidebar_label:"Manual Installation"},p={unversionedId:"Getting-Started/manual-installation",id:"Getting-Started/manual-installation",isDocsHomePage:!1,title:"Manual Installation",description:"iOS",source:"@site/docs/Getting-Started/manual-installation.mdx",sourceDirName:"Getting-Started",slug:"/Getting-Started/manual-installation",permalink:"/rn-datepicker-website/docs/Getting-Started/manual-installation",editUrl:"https://github.com/react-native-datetimepicker/datetimepicker/docs/Getting-Started/manual-installation.mdx",version:"current",sidebar_label:"Manual Installation",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"Manual Installation",sidebar_label:"Manual Installation"},sidebar:"tutorialSidebar",previous:{title:"Installation",permalink:"/rn-datepicker-website/docs/Getting-Started/installation"},next:{title:"Basic Usage With State",permalink:"/rn-datepicker-website/docs/Usage/example"}},c=[{value:"iOS",id:"ios",children:[]},{value:"Android",id:"android",children:[]}],d={toc:c};function s(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"ios"},"iOS"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Install CocoaPods, here the ",(0,i.kt)("a",{parentName:"p",href:"https://guides.cocoapods.org/using/getting-started.html"},"installation guide"),".")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Inside the iOS folder run ",(0,i.kt)("inlineCode",{parentName:"p"},"pod init"),", this will create the initial ",(0,i.kt)("inlineCode",{parentName:"p"},"pod")," file.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Update your ",(0,i.kt)("inlineCode",{parentName:"p"},"pod")," file to look like the following ( Remember to replace ",(0,i.kt)("inlineCode",{parentName:"p"},"MyApp")," with your target name ):"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"# Allowed sources\nsource 'https://github.com/CocoaPods/Specs.git'\n\ntarget 'MyApp' do\n  # As we use Swift, ensure that `use_frameworks` is enabled.\n  use_frameworks!\n\n  # Specific iOS platform we are targetting\n  platform :ios, '8.0'\n\n  # Point to the installed version\n  pod 'RNDateTimePicker', :path => '../node_modules/@react-native-community/datetimepicker/RNDateTimePicker.podspec'\n\n  # React/React-Native specific pods\n  pod 'React', :path => '../node_modules/react-native', :subspecs => [\n    'Core',\n    'CxxBridge',      # Include this for RN >= 0.47\n    'DevSupport',     # Include this to enable In-App Devmenu if RN >= 0.43\n    'RCTText',\n    'RCTNetwork',\n    'RCTWebSocket',   # Needed for debugging\n  ]\n\n  # Explicitly include Yoga if you are using RN >= 0.42.0\n  pod 'yoga', :path => '../node_modules/react-native/ReactCommon/yoga'\n\n  # Third party deps podspec link\n  pod 'DoubleConversion', :podspec => '../node_modules/react-native/third-party-podspecs/DoubleConversion.podspec'\n  pod 'glog', :podspec => '../node_modules/react-native/third-party-podspecs/glog.podspec'\n  pod 'Folly', :podspec => '../node_modules/react-native/third-party-podspecs/Folly.podspec'\n\nend\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Run ",(0,i.kt)("inlineCode",{parentName:"p"},"pod install")," inside the same folder where the ",(0,i.kt)("inlineCode",{parentName:"p"},"pod")," file was created")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"npm run start"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"npm run start:ios")))),(0,i.kt)("h2",{id:"android"},"Android"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Add the following lines to ",(0,i.kt)("inlineCode",{parentName:"p"},"android/settings.gradle"),":"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-gradle"},"include ':@react-native-community_datetimepicker'\nproject(':@react-native-community_datetimepicker').projectDir = new File(rootProject.projectDir, '../node_modules/@react-native-community/datetimepicker/android')\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Add the compile line to the dependencies in ",(0,i.kt)("inlineCode",{parentName:"p"},"android/app/build.gradle"),":"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-gradle"},"dependencies {\n    ...\n    implementation project(':@react-native-community_datetimepicker')\n}\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Add the import and link the package in ",(0,i.kt)("inlineCode",{parentName:"p"},"MainApplication.java"),":"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-diff"},'+ import com.reactcommunity.rndatetimepicker.RNDateTimePickerPackage;\n\npublic class MainApplication extends Application implements ReactApplication {\n\n  @Override\n  protected List<ReactPackage> getPackages() {\n    @SuppressWarnings("UnnecessaryLocalVariable")\n    List<ReactPackage> packages = new PackageList(this).getPackages();\n    // Packages that cannot be autolinked yet can be added manually here, for example:\n+   packages.add(new RNDateTimePickerPackage());\n    return packages;\n  }\n}\n')))))}s.isMDXComponent=!0}}]);